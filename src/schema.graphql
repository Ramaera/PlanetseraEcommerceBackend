# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AddressData {
  addresId: String!
  address: [JSONObject!]!
  buyerId: String
  mobileNumber: String
  name: String
}

type AllOrdersData {
  Buyer: BuyerData
  Payment: [PaymentData!]
  ShippingCost: Int!
  address: AddressData
  id: String!
  orderAmount: Float!
  orderDate: DateTime!
  orderItems: [OrderItems!]
  status: Status!
}

type Auth {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
  user: User!
}

type BuyerData {
  Cart: [Cart!]
  id: String!
  userId: String!
}

type Cart {
  buyerId: String
  cartItem: [CartItems!]
  id: String
}

type CartItems {
  id: String!
  name: String
  productVariantId: Int!
  qty: Int!
}

input CartOperationInput {
  cartItemId: String!
  operation: String!
  qty: Int!
}

input ChangePasswordInput {
  newPassword: String!
  oldPassword: String!
}

input CreateCartInput {
  buyerId: String!
  name: String!
  productVariantId: Int!
  qty: Int!
}

input CreateOrderInput {
  AddressId: Int!
  ShippingCost: Int!
  buyerId: String!
  cartId: String!
  orderAmount: Float!
}

input CreateOrderPayment {
  buyerId: String
  orderId: Int!
  paymentId: String!
}

input CreateProductInput {
  Amazon: Boolean!
  Flipkart: Boolean!
  category: [String!]!
  description: String!
  metaData: [JSONObject!]
  productImageUrl: String!
  productUrl: String!
  title: String!
  type: String!
}

input CreateProductVariantInput {
  imageUrl: [String!]!
  price: Float!
  productId: String!
  stock: Int!
  weight: String!
}

input CreateRewardCodeInput {
  """Example field (placeholder)"""
  rewardCode: String!

  """Example field (placeholder)"""
  userId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

"""
A field whose value is a JSON Web Token (JWT): https://jwt.io/introduction.
"""
scalar JWT

input LoginInput {
  email: String!
  password: String!
}

type MessageOutput {
  success: Boolean
}

type Mutation {
  addAddress(data: UpdateBuyerAddressInput!): AddressData!
  cartOpeartion(CartOperationInput: CartOperationInput!): MessageOutput!
  changePassword(data: ChangePasswordInput!): User!
  createCart(createCartInput: CreateCartInput!): Cart!
  createOrder(CreateOrder: CreateOrderInput!): Order!
  createPaymentData(data: CreateOrderPayment!): PaymentData!
  createProduct(input: CreateProductInput!): Product!
  createProductVariant(CreateProductVariantInput: CreateProductVariantInput!): ProductVariant!
  createRewardCode(data: CreateRewardCodeInput!): RewardCode!
  deleteCart(cartId: String!): MessageOutput!
  login(data: LoginInput!): Auth!
  refreshToken(token: JWT!): Token!
  removeAddress(AddressId: Int!): MessageOutput!
  removeItemFromCart(cartItem: String!): MessageOutput!
  removeOrder(id: Int!): Order!
  signup(data: SignupInput!): Auth!
  updateBuyer(data: UpdateUserInput!): User!
  updateCart(data: UpdateProductInput!): Cart!
  updateOrder(updateOrderInput: UpdateOrderInput!): Order!
  updateProductDetails(data: UpdateProductDetailsInput!): UpdatedProduct!
  updateProductVariant(data: UpdateProductVariantInput!): ProductVariant!
  updateUser(data: UpdateUserInput!): User!
}

type Order {
  newOrder: OrderData
  orderItems: [OrderItems!]
}

type OrderData {
  address: AddressData!
  buyerId: String!
  id: Int!
  orderDate: DateTime!
}

type OrderItems {
  id: String!
  name: String!
  productVariantId: Int!
  qty: Int!
}

type PaymentData {
  buyerId: String
  dateOfPayment: DateTime!
  orderId: Int!
  paymentId: String!
}

type Post {
  author: User
  content: String

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  id: ID!
  published: Boolean!
  title: String!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type Product {
  newProduct: ProductDetails!
}

type ProductDetails {
  Amazon: Boolean!
  Flipkart: Boolean!
  category: [String!]!
  description: String!
  id: String!
  metaData: [JSONObject!]
  productImageUrl: String!
  productUrl: String!
  title: String!
  type: String!
}

type ProductVariant {
  id: Int!
  imageUrl: [String!]!
  price: Float!
  stock: Int
  weight: Int
}

type Query {
  allOrders(buyerId: String!): [AllOrdersData!]!
  allProducts: [allProducts!]!
  findPaymentData(merchantTransactionId: String!): PaymentData!
  getBuyer: BuyerData!
  getBuyerAddress(buyerId: String!): [AddressData!]!
  getallOrders: [AllOrdersData!]!
  hello(name: String!): String!
  helloWorld: String!
  me: User!
  order(id: Int!): Order!
  viewCart(buyerId: String!): Cart!
}

type RewardCode {
  """rewardCode"""
  rewardCode: String!
}

"""User role"""
enum Role {
  ADMIN
  CUSTOMER
}

input SignupInput {
  email: String!
  mobileNumber: String
  name: String
  password: String!
}

"""Order Status"""
enum Status {
  DELIVERED
  OUTFORDELIVERY
  PACKED
  PROCESSING
  SELLERCANCELLED
  SHIPPED
  USERCANCELLED
}

type Subscription {
  postCreated: Post!
}

type Token {
  """JWT access token"""
  accessToken: JWT!

  """JWT refresh token"""
  refreshToken: JWT!
}

input UpdateBuyerAddressInput {
  address: [JSONObject!]!
  buyerId: String
  mobileNumber: String
  name: String
}

input UpdateOrderInput {
  AddressId: Int
  ShippingCost: Int
  buyerId: String
  cartId: String
  id: Int!
  orderAmount: Float
}

input UpdateProductDetailsInput {
  Amazon: Boolean
  Flipkart: Boolean
  category: [String!]
  description: String
  id: String
  metaData: [JSONObject!]
  productImageUrl: String
  productUrl: String
  title: String
  type: String
}

input UpdateProductInput {
  Amazon: Boolean
  Flipkart: Boolean
  cartItemId: String!
  category: [String!]
  description: String
  metaData: [JSONObject!]
  productImageUrl: String
  productUrl: String
  quantity: Int!
  title: String
  type: String
}

input UpdateProductVariantInput {
  id: Int!
  imageUrl: [String!]!
  price: Float!
  stock: Int!
  weight: String!
}

input UpdateUserInput {
  address: [JSONObject!]
}

type UpdatedProduct {
  Amazon: Boolean
  Flipkart: Boolean
  category: [String!]
  description: String
  id: String
  metaData: [JSONObject!]
  productImageUrl: String
  productUrl: String
  title: String
  type: String
}

type User {
  buyer: BuyerData!

  """Identifies the date and time when the object was created."""
  createdAt: DateTime!
  email: String
  id: ID!
  name: String
  role: Role!

  """Identifies the date and time when the object was last updated."""
  updatedAt: DateTime!
}

type allProducts {
  Amazon: Boolean!
  Flipkart: Boolean!
  ProductsVariant: [ProductVariant!]!
  category: [String!]!
  description: String!
  id: String!
  isActive: Boolean!
  metaData: [JSONObject!]
  productImageUrl: String!
  productUrl: String!
  title: String!
  type: String
}