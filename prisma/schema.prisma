datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  email     String    @unique
  password  String
  name      String?
  role      Role
  Order     Order[]
  Payment   Payment[]
  buyer     Buyer?
}

model Buyer {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String    @unique
  orders    Order[]
  addresses Address[]
  Cart      Cart?
}

model Products {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  title           String
  description     String
  ProductsVariant ProductVariant[]
}

model ProductVariant {
  id        Int       @id @default(autoincrement())
  weight    Float
  imageUrl  String[]
  price     Float
  stock     Int?
  products  Products? @relation(fields: [productId], references: [id])
  Cart      Cart[]
  productId String
}

model Cart {
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  id               String         @id @default(cuid())
  buyer            Buyer          @relation(fields: [buyerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  buyerId          String         @unique
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId Int
}

model Order {
  orderId              Int         @id @default(autoincrement())
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  orderDate            DateTime
  orderItem            OrderItem   @relation(fields: [orderItemOrderItemId], references: [OrderItemId])
  orderAmount          Float
  user                 User        @relation(fields: [userId], references: [id])
  userId               String
  Payment              Payment[]
  orderItemOrderItemId Int
  status               OrderStatus @default(PROCESSING)
  Buyer                Buyer?      @relation(fields: [buyerId], references: [id])
  buyerId              String?
}

model OrderItem {
  OrderItemId Int     @id @default(autoincrement())
  MRP         Float
  Quantity    Int
  Order       Order[]
}

model Payment {
  paymentId     Int      @id @default(autoincrement())
  order         Order    @relation(fields: [orderOrderId], references: [orderId])
  orderOrderId  Int
  user          User     @relation(fields: [userId], references: [id])
  dateOfPayment DateTime
  userId        String
}

model Address {
  addresId     Int     @id @default(autoincrement())
  name         String
  mobileNumber String
  Buyer        Buyer?  @relation(fields: [buyerId], references: [id])
  buyerId      String?
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  OUTOFSTOCK
  USERCANCELLED
  SELLERCANCELLED
  PROCESSING
  PACKED
  SHIPPED
  OUTFORDELIVERY
  DELIVERED
}
