datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  email     String    @unique
  password  String
  name      String?
  role      Role
  Payment   Payment[]
  buyer     Buyer?
}

model Buyer {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String    @unique
  orders    Order[]
  addresses Address[]
  Cart      Cart[]
}

model Products {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  title           String
  description     String
  productImageUrl String?
  metaData        Json?            @db.Json
  category        String[]
  ProductsVariant ProductVariant[]
  Flipkart        Boolean          @default(false)
  Amazon          Boolean          @default(false)
  productUrl      String
  type            String
}

model ProductVariant {
  id        Int       @id @default(autoincrement())
  weight    String
  imageUrl  String[]
  price     Int?
  stock     Int?
  products  Products? @relation(fields: [productId], references: [id])
  productId String
}

model Order {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderDate   DateTime?
  orderAmount Float
  Payment     Payment[]
  status      OrderStatus @default(PROCESSING)
  Buyer       Buyer?      @relation(fields: [buyerId], references: [id])
  buyerId     String?
  OrderItem   Cart?       @relation(fields: [cartItemid], references: [id])
  cartItemid  String?
}

model Cart {
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  id         String      @id @default(cuid())
  checkedOut Boolean     @default(false)
  buyer      Buyer       @relation(fields: [buyerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  buyerId    String      @unique
  Order      Order[]
  cartItem   cartItems[]
}

model cartItems {
  id               String  @id @default(cuid())
  productVariantId Int
  qty              Int
  Cart             Cart?   @relation(fields: [cartId], references: [id])
  cartId           String?
}

model Payment {
  paymentId     Int      @id @default(autoincrement())
  order         Order    @relation(fields: [orderOrderId], references: [id])
  orderOrderId  Int
  user          User     @relation(fields: [userId], references: [id])
  dateOfPayment DateTime
  userId        String
}

model Address {
  addresId     Int     @id @default(autoincrement())
  name         String
  mobileNumber String
  Buyer        Buyer?  @relation(fields: [buyerId], references: [id])
  buyerId      String?
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  OUTOFSTOCK
  USERCANCELLED
  SELLERCANCELLED
  PROCESSING
  PACKED
  SHIPPED
  OUTFORDELIVERY
  DELIVERED
}
