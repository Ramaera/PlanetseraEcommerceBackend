datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // previewFeatures = []
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id           String       @id @default(cuid())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  email        String       @unique
  password     String
  mobileNumber String?
  name         String?
  role         Role
  rewardCode   RewardCode[]
  buyer        Buyer?
}

model RewardCode {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  rewardCode String?
  isClaimed  Boolean  @default(false)
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?
}

model Buyer {
  id        String    @id @default(cuid())
  user      User      @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  userId    String    @unique
  orders    Order[]
  addresses Address[]
  Payment   Payment[]
  Cart      Cart[]
}

model Products {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  title           String
  description     String
  productImageUrl String?
  metaData        Json?            @db.Json
  category        String[]
  ProductsVariant ProductVariant[]
  Flipkart        Boolean          @default(false)
  Amazon          Boolean          @default(false)
  productUrl      String
  type            String?
  isActive        Boolean          @default(false)
}

model ProductVariant {
  id              Int       @id @default(autoincrement())
  weight          String
  imageUrl        String[]
  price           Int?
  stock           Int?
  products        Products? @relation(fields: [productId], references: [id])
  productId       String
  isVariantActive Boolean   @default(false)
}

model Cart {
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  id         String      @id @default(cuid())
  checkedOut Boolean     @default(false)
  buyer      Buyer       @relation(fields: [buyerId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  buyerId    String      @unique
  Order      Order[]
  cartItem   cartItems[]
}

model cartItems {
  id               String  @id @default(cuid())
  productVariantId Int
  qty              Int
  Cart             Cart?   @relation(fields: [cartId], references: [id])
  cartId           String?
  name             String?
}

model Address {
  addresId     Int     @id @default(autoincrement())
  name         String
  mobileNumber String
  address      Json?
  Buyer        Buyer?  @relation(fields: [buyerId], references: [id])
  buyerId      String?
  Order        Order[]
}

model Payment {
  id            Int      @id @default(autoincrement())
  paymentId     String   @unique
  order         Order    @relation(fields: [orderId], references: [id])
  orderId       Int
  dateOfPayment DateTime
  Buyer         Buyer    @relation(fields: [buyerId], references: [id])
  buyerId       String
}

model Order {
  id           Int          @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  orderDate    DateTime?    @default(now())
  orderAmount  Float
  status       OrderStatus  @default(PROCESSING)
  Buyer        Buyer?       @relation(fields: [buyerId], references: [id])
  buyerId      String?
  cart         Cart?        @relation(fields: [cartid], references: [id])
  cartid       String?
  orderItems   orderItems[]
  ShippingCost Int?
  address      Address?     @relation(fields: [AddresId], references: [addresId])
  AddresId     Int?
  Payment      Payment[]
}

model orderItems {
  id               String  @id @default(cuid())
  productVariantId Int
  qty              Int
  Order            Order?  @relation(fields: [orderId], references: [id])
  orderId          Int?
  name             String?
}

enum Role {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  USERCANCELLED
  SELLERCANCELLED
  PROCESSING
  PACKED
  SHIPPED
  OUTFORDELIVERY
  DELIVERED
}

enum PaymentType {
  CASHONDELIVERY
  UPI
  CREDITCARD
  DEBITCARD
}

enum WeightInGram {
  Gram500
  Gram100
  Gram50
}

enum CategoryOfProducts {
  KitchenSpices
  ComingSoon
  MouthWatering
  NonvegTadka
  WeekandTadka
}

enum ProductType {
  blended
  grounded
}
